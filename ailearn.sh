#!/bin/bash

# ailearn.sh - Load TerrainIQ Dashcam context for AI assistants
# Tell Claude: "Run ./ailearn.sh" at the start of any session

echo "ü§ñ Loading TerrainIQ Dashcam context for AI assistant..."
echo "============================================================="

# Check if we're in the right directory
if [[ ! -d ".claude" ]]; then
    echo "‚ùå Error: .claude directory not found!"
    echo "   Navigate to project root directory first"
    echo "   Expected path: /Users/ryan-bookmarked/platform/intellimass/TerrainIQ/"
    exit 1
fi

CLAUDE_DIR=".claude"

echo ""
echo "üìã QUICK CONTEXT:"
echo "=================="
cat "$CLAUDE_DIR/context.md"

echo ""
echo "üîç PROJECT STATUS:"
echo "=================="

# Check if Git is initialized
if [[ -d ".git" ]]; then
    echo "Current branch: $(git branch --show-current)"
    echo ""
    echo "Recent changes:"
    git status --short
    echo ""
    echo "Last 5 commits:"
    git log --oneline -5
else
    echo "‚ö†Ô∏è  Git repository: NOT INITIALIZED"
    echo "   Recommendation: Initialize Git for version control"
    echo ""
    echo "   To initialize:"
    echo "   $ git init"
    echo "   $ git add ."
    echo "   $ git commit -m 'Initial commit'"
fi

echo ""
echo "üìÅ Claude Code Documentation:"
echo "=============================="
ls -1 "$CLAUDE_DIR"/*.md 2>/dev/null | while read file; do
    echo "‚Ä¢ $(basename "$file")"
done

echo ""
echo "üì± Flutter Project Status:"
echo "==========================="
cd terrain_iq_dashcam 2>/dev/null && {
    echo "Flutter version: $(flutter --version 2>&1 | head -1)"
    echo "Project version: $(grep '^version:' pubspec.yaml | awk '{print $2}')"
    echo ""
    echo "Key dependencies:"
    grep -E '^\s+(camera|geolocator|provider|permission_handler):' pubspec.yaml
    cd ..
} || {
    echo "‚ö†Ô∏è  Could not access terrain_iq_dashcam directory"
}

echo ""
echo "‚úÖ CONTEXT LOADED! Ready for AI assistance."
echo "============================================"
echo ""
echo "üöÄ QUICK START CHECKLIST FOR AI:"
echo "=================================="
echo "‚Ä¢ Read .claude/context.md (already displayed above)"
echo "‚Ä¢ Read .claude/analysis.md (comprehensive system overview)"
echo "‚Ä¢ Read .claude/AGENT_RULES.md (behavioral guidelines)"
echo "‚Ä¢ Read .claude/ai_session_initialization.md (initialization guide)"
echo "‚Ä¢ Review terrain_iq_dashcam/README.md (setup instructions)"
echo ""
echo "üìö For detailed help, ask Claude to read:"
echo "‚Ä¢ .claude/analysis.md (system architecture and components)"
echo "‚Ä¢ .claude/ai_session_initialization.md (AI initialization protocol)"
echo "‚Ä¢ terrain_iq_dashcam/README.md (project setup and usage)"
echo "‚Ä¢ terrain_iq_dashcam/REQUIREMENTS.md (functional requirements)"
echo "‚Ä¢ terrain_iq_dashcam/UI_REQUIREMENTS_MATRIX.md (comprehensive UI feature matrix)"
echo "‚Ä¢ terrain_iq_dashcam/API_SPECIFICATION.md (REST API & MQTT documentation)"
echo "‚Ä¢ terrain_iq_dashcam/UI_DESIGN_SYSTEM.md (visual design language & components)"
echo "‚Ä¢ terrain_iq_dashcam/SCREEN_ARCHITECTURE.md (screen implementation details)"
echo "‚Ä¢ terrain_iq_dashcam/lib/ (source code structure)"
echo ""
echo "üß† AI INITIALIZATION PROCESS:"
echo "=============================="
echo "1. Run this script (./ailearn.sh) ‚úÖ"
echo "2. Read the documentation files listed above"
echo "3. Commit foundational knowledge to memory"

if [[ -d ".git" ]]; then
    echo "4. üîç MANDATORY: Run git history analysis and show results"
    echo ""
    echo "üîç GIT HISTORY ANALYSIS REQUIRED!"
    echo "=================================="
    echo "Claude MUST run these commands and DISPLAY results:"
    echo "‚Ä¢ git log --oneline --since=\"2 weeks ago\" --no-merges"
    echo "‚Ä¢ git log --since=\"2 weeks ago\" --no-merges --name-only --pretty=format:\"%h %s\" | head -50"
    echo "‚Ä¢ git status"
    echo ""
    echo "Then provide structured report (see .claude/AGENT_RULES.md for format)"
else
    echo "4. ‚ö†Ô∏è  Git not initialized - skip git history analysis for now"
fi

echo "5. Apply critical workflow rules from .claude/AGENT_RULES.md"
echo "6. Verify understanding via initialization checklist"
echo ""
echo "‚ö†Ô∏è  MANDATORY SESSION ACKNOWLEDGMENT"
echo "====================================="
echo "After completing initialization, Claude MUST acknowledge:"
echo ""
echo "üîí CRITICAL BEHAVIORAL RULES:"
echo "‚Ä¢ NEVER use 'git add .' - always stage files individually"
echo "‚Ä¢ NEVER modify config files without explicit permission"
echo "‚Ä¢ ALWAYS ask permission before staging files for commit"
echo "‚Ä¢ NEVER do destructive updates without warning"
echo "‚Ä¢ NEVER modify pubspec.yaml without approval"
echo "‚Ä¢ ALWAYS run 'flutter pub get' after dependency changes"
echo "‚Ä¢ ALWAYS test camera features on physical devices"
echo ""
echo "üéØ SESSION INITIALIZATION COMPLETE WHEN:"
if [[ -d ".git" ]]; then
    echo "‚Ä¢ Git history analysis shown with structured report"
fi
echo "‚Ä¢ All critical behavioral rules acknowledged"
echo "‚Ä¢ Ready to work with current project context and priorities"
echo ""
echo "üí° Claude: Show your understanding by providing the complete"
echo "   initialization report including rules acknowledgment!"
echo ""
echo "üìã PROJECT QUICK REFERENCE:"
echo "==========================="
echo "Framework: Flutter (Dart)"
echo "Platform: iOS, Android, Web, Desktop"
echo "State Management: Provider pattern"
echo "Version: 1.0.0+1"
echo "Stage: Active Development"
echo ""
echo "Core Services:"
echo "‚Ä¢ CameraService - Video recording management"
echo "‚Ä¢ StorageService - File management and storage limits"
echo "‚Ä¢ PermissionService - Cross-platform permissions"
echo ""
echo "Key Features Implemented:"
echo "‚Ä¢ Camera integration with video recording"
echo "‚Ä¢ Permission management"
echo "‚Ä¢ Local file storage with auto-cleanup"
echo "‚Ä¢ Recording list and basic playback"
echo ""
echo "In Progress:"
echo "‚Ä¢ GPS tracking integration"
echo "‚Ä¢ Settings UI"
echo "‚Ä¢ Enhanced video playback"
echo ""
echo "üîß Common Development Commands:"
echo "================================"
echo "cd terrain_iq_dashcam"
echo "flutter pub get              # Install dependencies"
echo "flutter run                  # Run on connected device"
echo "flutter doctor               # Check environment"
echo "flutter analyze              # Run static analysis"
echo "flutter build apk --release  # Build Android release"
echo "flutter build ios --release  # Build iOS release"
echo ""
echo "üéâ Ready to assist with TerrainIQ Dashcam development!"
